#!/usr/bin/perl
use strict;
use lib "lib";
use Cwd;
use Getopt::Long;
use Plack::Loader;
use Plack::Util;
use Pod::Usage;

my $app    = "app.psgi";
my $help   = 0;
my @includes;

# From 'prove': Allow cuddling the paths with the -I
@ARGV = map { /^(-I)(.+)/ ? ($1,$2) : $_ } @ARGV;

Getopt::Long::Configure("no_ignore_case", "pass_through");
GetOptions(
    "a|app=s"      => \$app,
    "s|server=s"   => \$ENV{PLACK_SERVER},
    "i|impl=s"     => \$ENV{PLACK_SERVER},
    'I=s@'         => \@includes,
    "h|help",      => \$help,
);

pod2usage(0) if $help;
lib->import(@includes) if @includes;

my $handler = Plack::Util::load_psgi $app;

unless ($handler) {
    die $@ if $@;
    die "$app not found: $!\n" if $!;
    unless ($handler && ref $handler eq 'CODE') {
        die "$app does not return an application code reference.\n";
    }
}

my @args = map { s/^--//; $_ } @ARGV;
my $server = Plack::Loader->auto(@args);
$server->run($handler);
$server->run_loop if $server->can('run_loop'); # run event loop

__END__

=head1 NAME

plackup - Run PSGI application with Plack servers

=head1 SYNOPSIS

  # read your app from app.psgi file
  plackup

  # can be passed with --app option (Or -a)
  plackup --app hello.psgi

  # Switch server implementation with --server (or -s)
  plackup --server Coro --port 9090

=head1 DESCRIPTION

plackup is a command line utility to run PSGI application from the command line.

plackup automatically figures out the environment it is run in, and
runs your application in that environment.  mod_perl, FastCGI, CGI,
AnyEvent and others can all be detected. See L<Plack::Loader> for the
authorative list.

C<plackup> assumes you have an C<app.psgi> script in your current
directory, that would looke like:

  #!/usr/bin/perl
  use MyApp;
  my $app = MyApp->new;
  my $handler = sub { $app->run_psgi(@_) };

The last statement of C<app.psgi> should be a code reference that is a
PSGI application.

You can also use the C<--app> option to locate a C<.psgi> script with a
different name in a different path. (Actually the path doesn't need to
end in C<.psgi>: it's just there for convention)

You may also select a specific implementation to run on using the
C<PLACK_SERVER> environment variable or use the C<-s> or C<--server> flag
which will be prefered over the environment variable if present.

=head1 SEE ALSO

L<Plack::Loader>

=cut
