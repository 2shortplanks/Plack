#!/usr/bin/perl
use strict;
use lib "lib";
use Cwd;
use Getopt::Std;
use Plack::Loader;
use Pod::Usage;

getopts('c:i:', \my %opts);
$ENV{PLACK_IMPL} ||= $opts{i};

my $file = $opts{c} || "app.psgi";
my $handler = load_handler($opts{c} || Cwd::cwd . "/app.psgi");

unless ($handler) {
    die $@ if $@;
    die "$file not found.\n";
}

my @args = map { s/^--//; $_ } @ARGV;
my $impl = Plack::Loader->auto(@args);
$impl->run($handler);
$impl->run_loop if $impl->can('run_loop'); # run event loop

sub load_handler {
    my $file = shift;
    return unless -e $file;
    return do $file;
}

__END__

=head1 NAME

plackup -- a useful tool for running Plack applications

=head1 SYNOPSIS

  # read your app from app.psgi file
  plackup

  # can be passed with -c option
  plackup -c hello.psgi

  # switch implementations
  env PLACK_IMPL=Mojo plackup --port 9999

  # Or, -i
  plackup -i AnyEvent

=head1 DESCRIPTION

Plackup is a useful tool for running L<Plack> applications.

Plackup automatically figures out the environment it is run in, and runs your
application in that environment.  mod_perl, FastCGI, CGI, AnyEvent and Mojo and
others can all be detected. See L<Plack::Loader> for the authorative list.

C<< plackup >> assumes you have an C<< app.psgi >> script, but you can use the "-c" option
to use a C<< .psgi >> script with a different name.

You may also select a specific implementation to run on using the PLACK_IMPL environment variable
or use the C<< -i >> flag which will be prefered over the environment variable if present.

=head1 SEE ALSO

L<Plack::Loader>

=cut
